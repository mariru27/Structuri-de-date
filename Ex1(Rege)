#include<iostream>

int n = 5;
int sol[10][10];
int x = 1, y = 1;
int i = x;
int j = y;
int cale = 1;

bool Rege(int poz) {
	if (cale == n*n) {
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < n; j++) {
				std::cout << sol[i][j] << " | ";
				
			}
			std::cout << std::endl;
		}
		return true;
	}
	else {
		while (cale!=n*n) {
			int p = 0;
			if (i + 1 < n && j < n && sol[i + 1][j] == 0) {
				i++;
				p++;
				cale++;
				sol[i][j] = cale;
				bool a = Rege(poz + 1);
				if (a == true)
					return true;
				else {
					sol[i][j] = 0;
					i--;
					poz--;
					cale--;
				}
			}
			if (i < n && j + 1 < n && sol[i][j + 1] == 0) {
				p++;
				j++;
				cale++;
				sol[i][j] = cale;
				bool a = Rege(poz + 1);
				if (a == true)
					return true;
				else {
					sol[i][j] = 0;
					j--;
					poz--;
					cale--;
				}
			}
			if (i -1 >=0 && j< n && sol[i -1][j] == 0) {
				i--;
				p++;
				cale++;
				sol[i][j] = cale;
				bool a = Rege(poz + 1);
				if (a == true)
					return true;
				else {
					sol[i][j] = 0;
					i++;
					poz--;
					cale--;
				}
			}
			if (i  < n && j-1 >=0 && sol[i][j-1]==0) {
				p++;
				j--;
				cale++;
				sol[i][j] = cale;
				bool a = Rege(poz + 1);
				if (a == true)
					return true;
				else{
					sol[i][j] = 0;
					j++;
					poz--;
					cale--;
				}
			}
			if (i + 1 < n && j - 1 >= 0 && sol[i+1][j-1]==0) {
				i++;
				j--;
				p++;
				cale++;
				sol[i][j] = cale;
				bool a = Rege(poz + 1);
				if (a == true)
					return true;
				else {
					sol[i][j] = 0;
					i--;
					j++;
					poz--;
					cale--;
				}
			}
			if (i - 1 >= 0 && j + 1 < n && sol[i-1][j+1]==0) {
				i--;
				j++;
				p++;
				cale++;
				sol[i][j] = cale;
				bool a = Rege(poz + 1);
				if (a == true)
					return true;
				else {
					sol[i][j] = 0;
					i++;
					j--;
					poz--;
					cale--;
				}
			}
			if (i - 1 >= 0 && j - 1 >= 0 && sol[i-1][j-1]==0) {
				i--;
				j--;
				p++;
				cale++;
				sol[i][j] = cale;
				bool a = Rege(poz + 1);
				if (a == true)
					return true;
				else {
					sol[i][j] = 0;
					poz--;
					cale--;
					j++;
					i++;
				}
			}
			if (p == 0)
				return false;
		}
	}
}

void main() {
	sol[i][j] = 1;
	Rege(1);
	system("pause");
}
